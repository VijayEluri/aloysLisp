HISTORY : List of changes
	
To do
=====
- All non lisp functions on objects are private or protected or global.
- At last write all the base functions !!!
- Manage *xxx* variables for output of objects.
- Environment as dynamic object.
- Debug environment.
- Interface hooks (debug). Execute, continue, breakpoints, Environment stack.
- Compilation.... (as soon as possible)
- Add Missing streams.
- FUNCTIONS implements SPECIAL_FORM as functions can be function designators and not MACROS and SPECIAL_FORMS.....
- MACROS implements SPECIAL_FORM, not the contrary.
- Add CONDITION class
- Refactor printable() in a more standard way.
- Verify rest arguments management in java function tT... as array, tT (tLIST ?) as tLIST
- Automatic documentation creation (Wiki) by the programm itself. 
	- Doc for Java version of syntax of LISP Function (by type or classes and globally alphabeticaly)
	- Doc for LISP version of syntax of LISP Function
	- List of function to be implemented.

Doing
=====
- Complete rewrite of NUMBERs structure and functions.
- Clean-up all instantiation process.
- Create type objects.

Current state
=============
- Pass to an unified version of integer as BigInteger.
- All this stuff is intended to move to a more general lisp object model.
- Adding NUMBER functions
- Suppressed @Construct annotation. Replaced by factory static functions.
- Added tFUNCTION_DESIGNATOR (type (and SYMBOL LAMBDA-FUNCTION SYSTEM-FUNCTION)) to confirm and test.
- Rewrite ALL Stream lisp functions.
- Define clear documentation about function.
- Function library as blank classes.
- Automatic instantiate of all base object. This will be managed in detail later, perhaps config file
and command tags.
- Creation of STATIC, PRIMITIVE, CONSTRUCTOR function classes.
- Change %global, %primitive, %construct as direct function call class.

Version UB26
=============
- Add %instantiate function to create %primitive and %global function call for general LISP functions
- Add setf definition in plist :setf-func
- Add type definition in plist :type-class
- All function arguments can be object (translate Objects to tT's).
- Une notation classes to give lisp info on Java definition of LISP functions.
- Create function %static for creators and static functions call based on types.
- Automatically load all the lisp function classes.
- implement macroexpanders.
- Added type basic test (%istype obj)
- Added equality functions eq, eql, equal.
- Rewrite SYSTEM-FUNCTIONs in lisp begin the whole lisp interface with java in lisp.
- Create primitive lisp function to call directly objects java methods.
- Transform all Cell objects interface in type in a proper package aloyslisp.core.types (+rename)
- Complete key definition ((keyword variable) default)
- &allow-other-keys
- Change in the management of arguments binding order (mandatory, &optional, &rest, &key, 
&allow-other-keys, &aux).	
	
Version UB09
============	
- Alpha version working
	